/*******************************/
/* Generated by `sbt meta/run` */
/*******************************/
package effect_zoo.bench.contests
import java.util.concurrent.TimeUnit
import org.openjdk.jmh.annotations._
import effect_zoo.registry.Registry

@State(Scope.Thread)
@BenchmarkMode(Array(Mode.Throughput))
@OutputTimeUnit(TimeUnit.SECONDS)
@Fork(jvmArgs = Array("-Dcats.effect.tracing.mode=DISABLED", "-Xms2g", "-Xmx2g"))
class Sumh {
  val reg = Registry.findByContestName("Sumh")

  val CatsCore__run = reg.findRound("CatsCore", 0).run
  val CatsCore_RWS__run = reg.findRound("CatsCore_RWS", 0).run
  val CatsMTL__run = reg.findRound("CatsMTL", 0).run
  val CatsMTL_RWS__run = reg.findRound("CatsMTL_RWS", 0).run
  val CatsIO__run = reg.findRound("CatsIO", 0).run
  val CatsIO_RWS__run = reg.findRound("CatsIO_RWS", 0).run
  val CatsEff__run = reg.findRound("CatsEff", 0).run
  val Turbolift_Local__run = reg.findRound("Turbolift_Local", 0).run
  val Turbolift_Local_Bindless__run = reg.findRound("Turbolift_Local_Bindless", 0).run
  val Turbolift_Shared__run = reg.findRound("Turbolift_Shared", 0).run
  val Turbolift_Shared_Bindless__run = reg.findRound("Turbolift_Shared_Bindless", 0).run
  val ZIO_Cake__run = reg.findRound("ZIO_Cake", 0).run
  val ZIO_Layer__run = reg.findRound("ZIO_Layer", 0).run
  val ZIO_Env__run = reg.findRound("ZIO_Env", 0).run
  val ZIO_Stateful__run = reg.findRound("ZIO_Stateful", 0).run
  val ZPure__run = reg.findRound("ZPure", 0).run
  val Kyo__run = reg.findRound("Kyo", 0).run
  val Kyo_Direct__run = reg.findRound("Kyo_Direct", 0).run
  
  @Benchmark def CatsCore = CatsCore__run()
  @Benchmark def CatsCore_RWS = CatsCore_RWS__run()
  @Benchmark def CatsMTL = CatsMTL__run()
  @Benchmark def CatsMTL_RWS = CatsMTL_RWS__run()
  @Benchmark def CatsIO = CatsIO__run()
  @Benchmark def CatsIO_RWS = CatsIO_RWS__run()
  @Benchmark def CatsEff = CatsEff__run()
  @Benchmark def Turbolift_Local = Turbolift_Local__run()
  @Benchmark def Turbolift_Local_Bindless = Turbolift_Local_Bindless__run()
  @Benchmark def Turbolift_Shared = Turbolift_Shared__run()
  @Benchmark def Turbolift_Shared_Bindless = Turbolift_Shared_Bindless__run()
  @Benchmark def ZIO_Cake = ZIO_Cake__run()
  @Benchmark def ZIO_Layer = ZIO_Layer__run()
  @Benchmark def ZIO_Env = ZIO_Env__run()
  @Benchmark def ZIO_Stateful = ZIO_Stateful__run()
  @Benchmark def ZPure = ZPure__run()
  @Benchmark def Kyo = Kyo__run()
  @Benchmark def Kyo_Direct = Kyo_Direct__run()
}
